{"version":3,"file":"index.js","sources":["source/levels.js","source/storage.js"],"sourcesContent":["import hasOwn from '@actualwave/has-own';\n\n/**\n * Do not check or report type inconsistency\n */\nexport const REPORT_NEVER = 'never';\n/**\n * Report type inconsistency once, i.e. record all types and report new\n */\nexport const REPORT_ONCE = 'once';\n/**\n * Report whenever type is inconsistent with initial\n */\nexport const REPORT_ALL = 'all';\n\nconst REPORT_KEY = Symbol('type-checkers:report-level');\nconst PROPERTY_REPORT_KEY = Symbol('type-checkers:property-report-level');\n\nlet globalReportingLevel = REPORT_ALL;\n\nexport const validateReportingLevel = (level) => {\n  switch (level) {\n    case REPORT_NEVER:\n    case REPORT_ONCE:\n      return level;\n    default:\n      return REPORT_ALL;\n  }\n};\n\nexport const setGlobalReportingLevel = (level) => {\n  globalReportingLevel = validateReportingLevel(level);\n};\n\nexport const getGlobalReportingLevel = () => globalReportingLevel;\n\nconst setTargetGeneralReportingLevel = (target, level) => {\n  if (level) {\n    target[REPORT_KEY] = validateReportingLevel(level);\n  } else {\n    delete target[REPORT_KEY];\n  }\n};\n\nconst setTargetPropertyReportingLevel = (target, perPropertyLevels) => {\n  if (!perPropertyLevels) {\n    delete target[PROPERTY_REPORT_KEY];\n    return;\n  }\n\n  target[PROPERTY_REPORT_KEY] = Object.keys(perPropertyLevels).reduce(\n    (levels, prop) => {\n      levels[prop] = validateReportingLevel(perPropertyLevels[prop]);\n      return levels;\n    },\n    {}\n  );\n};\n\nexport const setReportingLevel = (target, generalLevel, perPropertyLevels) => {\n  setTargetGeneralReportingLevel(target, generalLevel);\n  setTargetPropertyReportingLevel(target, perPropertyLevels);\n};\n\nconst getTargetReportingLevel = (target, key) => {\n  if (hasOwn(target[PROPERTY_REPORT_KEY], key)) {\n    return target[PROPERTY_REPORT_KEY][key];\n  }\n\n  return target[REPORT_KEY];\n};\n\nexport const getReportingLevel = (target, key) => {\n  let level = getTargetReportingLevel(target, key);\n\n  if (!level) {\n    level = getTargetReportingLevel(target.constructor, key);\n  }\n\n  return level || getGlobalReportingLevel();\n};\n","import {\n  REPORT_NEVER,\n  REPORT_ONCE,\n  REPORT_ALL,\n  getReportingLevel,\n  validateReportingLevel,\n} from './levels';\n\n/**\n *\n * @param {any} key\n * @param {Set} target\n * @param {Set} source\n */\nexport const defaultMergeStrategy = (key, target, source) => {\n  source.forEach((type) => {\n    if (!target.has(type)) {\n      target.add(type);\n    }\n  });\n\n  return target;\n};\n\nclass MapOfSetsStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n\n  has(key) {\n    const values = this.storage.get(key);\n\n    return values && values.size;\n  }\n\n  hasValue(key, value) {\n    const values = this.storage.get(key);\n\n    return values && values.has(value);\n  }\n\n  /**\n   *\n   * @param {*} key\n   * @param {Function} callback\n   */\n  get(key, callback) {\n    const values = this.storage.get(key);\n\n    if (values) {\n      values.forEach((type) => callback(type, key, this));\n    }\n  }\n\n  /**\n   * Add to type information for specified key.\n   * @param {*} key\n   * @param {*} value\n   * @param {Number} level\n   */\n  add(key, value) {\n    if (!value) return;\n    const values = this.storage.get(key);\n\n    if (values) {\n      values.add(value);\n    } else {\n      this.storage.set(key, new Set([value]));\n    }\n  }\n\n  /**\n   * Replace values information for specific key\n   * @param {*} key\n   * @param {Set} types\n   * @param {Number} level\n   */\n  set(key, values) {\n    if (!values || values.size === 0) {\n      this.remove(key);\n      return;\n    }\n\n    this.storage.set(key, new Set(values));\n  }\n\n  remove(key) {\n    this.storage.delete(key);\n  }\n\n  removeValue(key, value) {\n    const values = this.storage.get(key);\n\n    if (values) {\n      values.delete(value);\n\n      if (!values.size) {\n        this.remove(key);\n      }\n    }\n  }\n\n  clone() {\n    const target = new MapOfSetsStorage();\n    this.storage.forEach((values, key) => target.set(key, new Set(values)));\n\n    return target;\n  }\n}\n\nclass TypeInfoStorage extends MapOfSetsStorage {\n  /**\n   * Add to type information for specified key.\n   * @param {*} key\n   * @param {*} type\n   * @param {Number} level\n   */\n  add(key, type, level) {\n    if (!type) return;\n\n    switch (level) {\n      case REPORT_NEVER:\n        this.remove(key);\n        break;\n      case REPORT_ONCE:\n        super.add(key, type);\n        break;\n      case REPORT_ALL:\n      default:\n        {\n          const types = this.storage.get(key);\n\n          if (!types || !types.size) {\n            this.storage.set(key, new Set([type]));\n          }\n        }\n        break;\n    }\n  }\n\n  addFor(key, type, target) {\n    this.add(key, type, getReportingLevel(target, key));\n  }\n\n  /**\n   * Replace types information for specific key\n   * @param {*} key\n   * @param {Set} types\n   * @param {Number} level\n   */\n  set(key, types, level) {\n    if (!types || types.size === 0 || level === REPORT_NEVER) {\n      this.remove(key);\n      return;\n    }\n\n    super.set(key, types);\n  }\n\n  /**\n   *\n   * @param {*} key\n   * @param {Set} types\n   * @param {Object} target\n   */\n  setFor(key, types, target) {\n    return this.set(key, types, getReportingLevel(target, key));\n  }\n\n  clone() {\n    const target = new TypeInfoStorage();\n    this.storage.forEach((types, key) => target.set(key, new Set(types)));\n\n    return target;\n  }\n\n  /**\n   * Copy types from current storage to storage passed as first argument.\n   * @param {Map} storage\n   * @param {Object} [target]\n   * @param {Function} [mergeStrategy]\n   */\n  copyTo(storage, target, mergeStrategy = defaultMergeStrategy) {\n    this.storage.forEach((types, key) => {\n      const level = validateReportingLevel(target && getReportingLevel(target, key));\n\n      switch (level) {\n        case REPORT_ALL:\n        case REPORT_ONCE:\n          if (storage.has(key)) {\n            storage.set(key, mergeStrategy(key, storage.get(key), types, level), level);\n          } else {\n            storage.set(key, new Set(types));\n          }\n          break;\n        case REPORT_NEVER:\n        default:\n          break;\n      }\n    });\n\n    return storage;\n  }\n}\n\nexport const createTypesStorage = () => new TypeInfoStorage();\n\nexport default TypeInfoStorage;\n"],"names":["REPORT_NEVER","REPORT_ONCE","REPORT_ALL","REPORT_KEY","Symbol","PROPERTY_REPORT_KEY","globalReportingLevel","validateReportingLevel","level","setGlobalReportingLevel","getGlobalReportingLevel","setTargetGeneralReportingLevel","target","setTargetPropertyReportingLevel","perPropertyLevels","Object","keys","reduce","levels","prop","setReportingLevel","generalLevel","getTargetReportingLevel","key","hasOwn","getReportingLevel","constructor","defaultMergeStrategy","source","forEach","type","has","add","MapOfSetsStorage","storage","Map","values","get","size","value","callback","set","Set","remove","delete","TypeInfoStorage","types","mergeStrategy","createTypesStorage"],"mappings":"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"}