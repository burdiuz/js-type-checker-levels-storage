{"version":3,"file":"index.min.js","sources":["node_modules/@actualwave/has-own/has-own.js","source/levels.js","source/storage.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst hasOwn = (\n  (has) =>\n  (target, property) =>\n  Boolean(target && has.call(target, property))\n)(Object.prototype.hasOwnProperty);\n\nexports.hasOwn = hasOwn;\nexports.default = hasOwn;","import hasOwn from '@actualwave/has-own';\n\n/**\n * Do not check or report type inconsistency\n */\nexport const REPORT_NEVER = 'never';\n/**\n * Report type inconsistency once, i.e. record all types and report new\n */\nexport const REPORT_ONCE = 'once';\n/**\n * Report whenever type is inconsistent with initial\n */\nexport const REPORT_ALL = 'all';\n\nconst REPORT_KEY = Symbol('type-checkers:report-level');\nconst PROPERTY_REPORT_KEY = Symbol('type-checkers:property-report-level');\n\nlet globalReportingLevel = REPORT_ALL;\n\nexport const validateReportingLevel = (level) => {\n  switch (level) {\n    case REPORT_NEVER:\n    case REPORT_ONCE:\n      return level;\n    default:\n      return REPORT_ALL;\n  }\n};\n\nexport const setGlobalReportingLevel = (level) => {\n  globalReportingLevel = validateReportingLevel(level);\n};\n\nexport const getGlobalReportingLevel = () => globalReportingLevel;\n\nconst setTargetGeneralReportingLevel = (target, level) => {\n  if (level) {\n    target[REPORT_KEY] = validateReportingLevel(level);\n  } else {\n    delete target[REPORT_KEY];\n  }\n};\n\nconst setTargetPropertyReportingLevel = (target, perPropertyLevels) => {\n  if (!perPropertyLevels) {\n    delete target[PROPERTY_REPORT_KEY];\n    return;\n  }\n\n  target[PROPERTY_REPORT_KEY] = Object.keys(perPropertyLevels).reduce(\n    (levels, prop) => {\n      levels[prop] = validateReportingLevel(perPropertyLevels[prop]);\n      return levels;\n    },\n    {}\n  );\n};\n\nexport const setReportingLevel = (target, generalLevel, perPropertyLevels) => {\n  setTargetGeneralReportingLevel(target, generalLevel);\n  setTargetPropertyReportingLevel(target, perPropertyLevels);\n};\n\nconst getTargetReportingLevel = (target, key) => {\n  if (hasOwn(target[PROPERTY_REPORT_KEY], key)) {\n    return target[PROPERTY_REPORT_KEY][key];\n  }\n\n  return target[REPORT_KEY];\n};\n\nexport const getReportingLevel = (target, key) => {\n  let level = getTargetReportingLevel(target, key);\n\n  if (!level) {\n    level = getTargetReportingLevel(target.constructor, key);\n  }\n\n  return level || getGlobalReportingLevel();\n};\n","import {\n  REPORT_NEVER,\n  REPORT_ONCE,\n  REPORT_ALL,\n  getReportingLevel,\n  validateReportingLevel,\n} from './levels';\n\n/**\n *\n * @param {any} key\n * @param {Set} target\n * @param {Set} source\n */\nexport const defaultMergeStrategy = (key, target, source) => {\n  source.forEach((type) => {\n    if (!target.has(type)) {\n      target.add(type);\n    }\n  });\n\n  return target;\n};\n\nclass MapOfSets {\n  constructor() {\n    this.storage = new Map();\n  }\n\n  has(key) {\n    const values = this.storage.get(key);\n\n    return values && values.size;\n  }\n\n  hasValue(key, value) {\n    const values = this.storage.get(key);\n\n    return values && values.has(value);\n  }\n\n  /**\n   * @param {*} key\n   */\n  get(key) {\n    return this.storage.get(key);\n  }\n\n  list(key) {\n    const values = this.storage.get(key);\n\n    return values ? Array.from(values) : [];\n  }\n\n  /**\n   * @param {Function} callback\n   */\n  forEach(callback) {\n    this.storage.forEach((values, key) => values.forEach((value) => callback(value, key, this)));\n  }\n\n  /**\n   * @param {*} key\n   * @param {Function} callback\n   */\n  eachValue(key, callback) {\n    const values = this.storage.get(key);\n\n    if (values) {\n      values.forEach((value) => callback(value, key, this));\n    }\n  }\n\n  /**\n   * Add to type information for specified key.\n   * @param {*} key\n   * @param {*} value\n   * @param {Number} level\n   */\n  add(key, value) {\n    if (!value) return;\n    const values = this.storage.get(key);\n\n    if (values) {\n      values.add(value);\n    } else {\n      this.storage.set(key, new Set([value]));\n    }\n  }\n\n  /**\n   * Replace values information for specific key\n   * @param {*} key\n   * @param {Set} types\n   * @param {Number} level\n   */\n  set(key, values) {\n    if (!values || values.size === 0) {\n      this.remove(key);\n      return;\n    }\n\n    this.storage.set(key, new Set(values));\n  }\n\n  remove(key) {\n    this.storage.delete(key);\n  }\n\n  removeValue(key, value) {\n    const values = this.storage.get(key);\n\n    if (values) {\n      values.delete(value);\n\n      if (!values.size) {\n        this.remove(key);\n      }\n    }\n  }\n\n  clone() {\n    const target = new MapOfSets();\n    this.storage.forEach((values, key) => target.set(key, new Set(values)));\n\n    return target;\n  }\n}\n\nclass TypeInfoStorage extends MapOfSets {\n  /**\n   * Add to type information for specified key.\n   * @param {*} key\n   * @param {*} type\n   * @param {Number} level\n   */\n  add(key, type, level) {\n    if (!type) return;\n\n    switch (level) {\n      case REPORT_NEVER:\n        this.remove(key);\n        break;\n      case REPORT_ONCE:\n        super.add(key, type);\n        break;\n      case REPORT_ALL:\n      default:\n        {\n          const types = this.storage.get(key);\n\n          if (!types || !types.size) {\n            this.storage.set(key, new Set([type]));\n          }\n        }\n        break;\n    }\n  }\n\n  addFor(key, type, target) {\n    this.add(key, type, getReportingLevel(target, key));\n  }\n\n  /**\n   * Replace types information for specific key\n   * @param {*} key\n   * @param {Set} types\n   * @param {Number} level\n   */\n  set(key, types, level) {\n    if (!types || types.size === 0 || level === REPORT_NEVER) {\n      this.remove(key);\n      return;\n    }\n\n    super.set(key, types);\n  }\n\n  /**\n   *\n   * @param {*} key\n   * @param {Set} types\n   * @param {Object} target\n   */\n  setFor(key, types, target) {\n    return this.set(key, types, getReportingLevel(target, key));\n  }\n\n  clone() {\n    const target = new TypeInfoStorage();\n    this.storage.forEach((types, key) => target.set(key, new Set(types)));\n\n    return target;\n  }\n\n  /**\n   * Copy types from current storage to storage passed as first argument.\n   * @param {Map} storage\n   * @param {Object} [target]\n   * @param {Function} [mergeStrategy]\n   */\n  copyTo(storage, target, mergeStrategy = defaultMergeStrategy) {\n    this.storage.forEach((types, key) => {\n      const level = validateReportingLevel(target && getReportingLevel(target, key));\n\n      switch (level) {\n        case REPORT_ALL:\n        case REPORT_ONCE:\n          if (storage.has(key)) {\n            storage.set(key, mergeStrategy(key, storage.get(key), types, level), level);\n          } else {\n            storage.set(key, new Set(types));\n          }\n          break;\n        case REPORT_NEVER:\n        default:\n          break;\n      }\n    });\n\n    return storage;\n  }\n}\n\nexport const createTypesStorage = () => new TypeInfoStorage();\n\nexport default TypeInfoStorage;\n"],"names":["Object","defineProperty","exports","value","hasOwn","has","target","property","Boolean","call","prototype","hasOwnProperty","REPORT_NEVER","REPORT_ONCE","REPORT_ALL","REPORT_KEY","Symbol","PROPERTY_REPORT_KEY","globalReportingLevel","validateReportingLevel","level","getGlobalReportingLevel","getTargetReportingLevel","key","getReportingLevel","constructor","defaultMergeStrategy","source","forEach","type","add","MapOfSets","storage","Map","values","this","get","size","Array","from","callback","set","Set","remove","delete","TypeInfoStorage","types","mergeStrategy","generalLevel","perPropertyLevels","keys","reduce","levels","prop"],"mappings":"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"}